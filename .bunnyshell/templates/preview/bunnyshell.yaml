kind: Environment
name: argo-base
type: primary
templateVariables:
    ARGOCD_ADMIN_PASS: 'ENCRYPTED[ZptGpxVtpGAxJFv6HpEZXxxHibYM1VuQO7sV4dOEZcx3wOM7iXYGRBmsxSzilZF2NG5xMmU=]'
    ARGOCD_READONLY_PASS: 'ENCRYPTED[7fHlvaHuPldmlzFg+yzpl2i9HFOG26ntGonYiAAMSkjSLI0tIr1b4yOL3+KVkXY0bnEyZQ==]'
environmentVariablesGroups:
    argocd:
        ARGOCD_ADMIN_PASS: 'ENCRYPTED[ZptGpxVtpGAxJFv6HpEZXxxHibYM1VuQO7sV4dOEZcx3wOM7iXYGRBmsxSzilZF2NG5xMmU=]'
        ARGOCD_READONLY_PASS: 'ENCRYPTED[7fHlvaHuPldmlzFg+yzpl2i9HFOG26ntGonYiAAMSkjSLI0tIr1b4yOL3+KVkXY0bnEyZQ==]'
components:
    -
        kind: DockerImage
        name: argocd-image
        gitRepo: 'https://github.com/argoproj/argo-cd.git'
        gitBranch: master
        gitApplicationPath: /
        context: /
        dockerfile: Dockerfile
        args:
            ENV: bunnyshell
    -
        kind: KubernetesManifest
        name: argocd
        gitRepo: 'https://github.com/argoproj/argo-cd.git'
        gitBranch: master
        gitApplicationPath: /
        runnerImage: 'alpine/k8s:1.22.15'
        deploy:
            - 'export IMAGE_FULL_NAME="${ARGOCD_IMAGE}"'
            - |
                echo "tweaking manifests/cluster-rbac for this instance ..." \
                && cd manifests/cluster-rbac \
                && kustomize edit set nameprefix {{ env.k8s.namespace }}- \
                && kustomize edit add label app.kubernetes.io/instance:env-{{ env.unique }} \
                && kustomize edit add label app.kubernetes.io/instance-{{ component.name }}:bns \
                && kustomize edit add label app.kubernetes.io/part-of:env-{{ env.unique }} \
                && sed -i "s/namespace: argocd/namespace: {{ env.k8s.namespace }}/g" ./*/*-clusterrolebinding.yaml \
                && cd -
            - |
                echo "tweaking manifests/namespace-install for this instance ..." \
                && cd manifests/namespace-install \
                && kustomize edit add label app.kubernetes.io/instance:env-{{ env.unique }} \
                && kustomize edit add label app.kubernetes.io/instance-{{ component.name }}:bns \
                && kustomize edit add label app.kubernetes.io/part-of:env-{{ env.unique }} \
                && imagePullPatch=$(cat <<'EOF'
                - op: add
                  path: /spec/template/spec/imagePullSecrets
                  value:
                  - name: bns-reg-cred-{{ env.unique }}-0
                  - name: bns-reg-cred-{{ env.unique }}-140
                EOF
                ) \
                && kustomize edit add patch --kind Deployment --patch "$imagePullPatch" \
                && kustomize edit add patch --kind StatefulSet --patch "$imagePullPatch" \
                && cd -
            - |
                echo "preserving labels for configmaps ..." \
                && cat <<'EOF' >> ./manifests/namespace-install/kustomization.yaml
                # Specify transformers for labels
                transformers:
                  - configmap-label-transformer.yaml  
                EOF
            - |
                cat <<'EOF' >> ./manifests/namespace-install/configmap-label-transformer.yaml
                apiVersion: builtin
                kind: LabelTransformer
                metadata:
                  name: configmap-label-transformer
                labels:
                  app.kubernetes.io/part-of: argocd
                fieldSpecs:
                  - path: metadata/labels
                    kind: ConfigMap 
                EOF
            - |
                echo "setting configs ..." \
                && cat <<'EOF' >> ./manifests/base/config/kustomization.yaml
                configMapGenerator:
                - name: argocd-cmd-params-cm
                  behavior: merge
                  literals:
                    - server.insecure="true"
                - name: argocd-cm
                  behavior: merge
                  literals:
                    - accounts.readonly-user="login"
                - name: argocd-rbac-cm
                  behavior: merge
                  literals:
                    - policy.default="role:readonly"
                    - policy.csv=""
                EOF
            - |
                echo "tweaking hack/update-manifests.sh to update image ..." \
                && sed -i "s#\${IMAGE_NAMESPACE}/argocd:\${IMAGE_TAG}#\${IMAGE_FULL_NAME}#g" ./hack/update-manifests.sh
            - |
                echo "building manifests ..." \
                && chmod +x ./hack/update-manifests.sh && IMAGE_TAG=none ./hack/update-manifests.sh
            - |
                echo "applying manifests ..." \
                && kubectl apply -f ./manifests/install.yaml -n {{ env.k8s.namespace }}
            - |
                echo "setting Deployment replicas ..." \
                && kubectl get deployments -o name -n {{ env.k8s.namespace }} | xargs -I {} kubectl patch {} -n {{ env.k8s.namespace }} --type='json' -p='[{"op": "replace", "path": "/spec/replicas", "value": 1}]'
            - |
                echo "creating ingress ..." \
                && (cat << EOF > bns_ingress.yaml
                    apiVersion: networking.k8s.io/v1
                    kind: Ingress
                    metadata:
                        name: argocd-ingress
                        annotations:
                            alb.ingress.kubernetes.io/target-type: ip
                            nginx.ingress.kubernetes.io/use-regex: 'true'
                        labels:
                            app.kubernetes.io/managed-by: Bunnyshell
                            app.kubernetes.io/part-of: env-{{ env.unique }}
                            app.kubernetes.io/instance-argocd: bns
                    spec:
                        ingressClassName: bns-nginx
                        rules:
                            -
                                host: argocd-{{ env.base_domain }}
                                http:
                                    paths:
                                        -
                                            path: /
                                            pathType: Prefix
                                            backend:
                                                service:
                                                    name: argocd-server
                                                    port:
                                                        number: 443
                        tls:
                            - hosts:
                                - argocd-{{ env.base_domain }}
                              secretName: argocd-secret # do not change, this is provided by Argo CD
                EOF
                ) \
                && kubectl apply -f ./bns_ingress.yaml -n {{ env.k8s.namespace }}
        destroy:
            - |
                echo "destroy is handled in argocd-ttyd component"
                #kubectl delete ns {{ env.k8s.namespace }}
        start:
            - |
                echo "start is handled in argocd-ttyd component"
                #kubectl scale --replicas=1 --namespace {{ env.k8s.namespace }} deployment --all
        stop:
            - |
                echo "stop is handled in argocd-ttyd component"
                #kubectl scale --replicas=0 --namespace {{ env.k8s.namespace }} deployment --all
        environment:
            ARGOCD_IMAGE: '{{ components.argocd-image.image }}'
        dependsOn:
            - argocd-image
    -
        kind: DockerImage
        name: argocd-ttyd-image
        gitRepo: 'https://github.com/bunnyshell/argo-cd.git'
        gitBranch: master-bns
        gitApplicationPath: /.bunnyshell/argocd-ttyd
        context: /.bunnyshell/argocd-ttyd
        dockerfile: Dockerfile
        args:
            ARGOCD_IMAGE: '{{ components.argocd-image.image }}'
            TTYD_VERSION: 1.7.3
        dependsOn:
            - argocd-image
    -
        kind: KubernetesManifest
        name: argocd-ttyd
        gitRepo: 'https://github.com/bunnyshell/argo-cd.git'
        gitBranch: master-bns
        gitApplicationPath: /.bunnyshell/argocd-ttyd
        runnerImage: 'alpine/k8s:1.22.15'
        deploy:
            - '#sleep 3600'
            - |
                echo "waiting for initial secret ..." \
                && kubectl wait deployment -n {{ env.k8s.namespace }} argocd-server --for condition=Available=True --timeout=30s
            - 'ARGOCD_INITIAL_PASS=$(kubectl -n {{ env.k8s.namespace }} get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)'
            - 'cd ./.bunnyshell/argocd-ttyd/manifests'
            - |
                echo "adding bunnyshell labels ..." \
                && kustomize edit add label app.kubernetes.io/part-of:env-{{ env.unique }} app.kubernetes.io/instance-argocd-ttyd:bns
            - |
                echo "patching ttyd deployment ..." \
                && (cat << EOF > ttyd-deployment-patch.json
                    [
                     {
                          "op": "replace", 
                          "path": "/spec/template/spec/containers/0/image", 
                          "value": "{{ components.argocd-ttyd-image.image }}"
                     },
                     {
                          "op": "replace", 
                          "path": "/spec/template/spec/initContainers/0/image", 
                          "value": "{{ components.argocd-ttyd-image.image }}"
                     }
                    ]
                EOF
                ) \
                && sed -i \
                    -e "s/%ARGOCD_PASS%/$ARGOCD_ADMIN_PASS/g" \
                    -e "s/%ARGOCD_INITIAL_PASS%/$ARGOCD_INITIAL_PASS/g" \
                    -e "s/%ARGOCD_SERVER%/argocd-server.{{ env.k8s.namespace }}.svc.cluster.local:80/g" \
                    ./ttyd-deployment.yaml
            - |
                echo "patching ttyd ingress ..." \
                && cat << EOF > ttyd-ingress-patch.json
                    [
                     {
                          "op": "replace", 
                          "path": "/spec/rules/0/host", 
                          "value": "argocd-web-cli-{{ env.base_domain }}"
                     }
                    ]
                EOF
            - |
                echo "applying manifests ..." \
                && kubectl apply -k . -n {{ env.k8s.namespace }}
            - |
                echo "waiting for ttyd ..." \
                && kubectl wait deployment -n {{ env.k8s.namespace }} ttyd --for condition=Available=True --timeout=30s \
                && sleep 30 # time to for ttyd to finish starting
            - |
                echo "adding demo app ..." \
                && kubectl exec deployment/ttyd -c ttyd -n {{ env.k8s.namespace }} -- /bin/bash -c " \
                   argocd app create guestbook \
                   --repo https://github.com/argoproj/argocd-example-apps.git \
                   --path guestbook \
                   --dest-server https://kubernetes.default.svc \
                   --insecure \
                   --dest-namespace {{ env.k8s.namespace }}-guestbook \
                   --sync-option CreateNamespace=true \
                   && argocd app sync guestbook"
            - |
                echo "settings readonly-user pass ..." \
                && kubectl exec deployment/ttyd -c ttyd -n {{ env.k8s.namespace }} -- /bin/bash -c " \
                   argocd account update-password \
                   --account readonly-user \
                   --current-password ${ARGOCD_ADMIN_PASS} \
                   --new-password ${ARGOCD_READONLY_PASS}"
        destroy:
            - |
                echo "checking argocd is up ..." \
                && argocdIsRunning=$(kubectl get pods -l app.kubernetes.io/name=argocd-server -n {{ env.k8s.namespace }} -o name --field-selector=status.phase=Running)
            - |
                echo "checking ttyd is up ..." \
                && ttydIsRunning=$(kubectl get pods -l app.kubernetes.io/name=ttyd -n {{ env.k8s.namespace }} -o name --field-selector=status.phase=Running)
            - |
                if [ ! -z "$argocdIsRunning" ] && [ ! -z "$ttydIsRunning" ]; then
                  echo "deleting argocd apps ..."
                  # fetch the app namespaces to manually delete them later
                  # 'argocd app delete' does not delete the namespaces too
                  app_namespaces=$(kubectl exec deployment/ttyd --namespace {{ env.k8s.namespace }} -- \
                    /bin/bash -c "/fetch-namespaces.sh 2>&1 | grep -ozP '(?s)app-namespaces:\K.*'" \
                  )
                  timeout 5m kubectl exec deployment/ttyd --namespace {{ env.k8s.namespace }} -- ./destroy.sh
                else
                  echo "argocd-sever and/or ttyd are stopped, will skip deleting apps and namespaced installed by argocd"
                  app_namespaces=""
                fi
            - |
                for app_namespace in $app_namespaces; do
                  echo "deleting app namespace '$app_namespace' ..."
                  kubectl delete ns $app_namespace
                done
            - |
                echo "deleting argocd related resources ..." \
                && kubectl delete "$(kubectl api-resources --namespaced=true --verbs=delete -o name --sort-by=kind | tr "\n" "," | sed -e 's/,$//')" -l app.kubernetes.io/instance=env-{{ env.unique }} --ignore-not-found=true --now=true --wait=true
            - |
                for resourcetype in $(kubectl api-resources --namespaced=false --verbs=delete -o name); do
                  echo "deleting $resourcetype ..."
                  kubectl delete $resourcetype -l app.kubernetes.io/instance=env-{{ env.unique }} --ignore-not-found=true --wait=false
                done
            - |
                echo "deleting argocd-ttyd resources ..." \
                && kubectl delete "$(kubectl api-resources --namespaced=true --verbs=delete -o name | tr "\n" "," | sed -e 's/,$//')" -l "app.kubernetes.io/instance-argocd-ttyd=bns,app.kubernetes.io/part-of=env-{{ env.unique }}" --ignore-not-found=true --now=true --wait=true
        start:
            - |
                echo "starting argocd instance ..." \
                && kubectl scale --replicas=1 --namespace {{ env.k8s.namespace }} Deployment,StatefulSet,DaemonSet --all
            - |
                echo "waiting for argocd instance to start ..." \
                && kubectl wait deployment -n {{ env.k8s.namespace }} argocd-server --for condition=Available=True --timeout=30s \
                && kubectl wait deployment -n {{ env.k8s.namespace }} ttyd --for condition=Available=True --timeout=30s
            - |
                echo "starting argocd apps ..." \
                && app_namespaces=$(kubectl exec deployment/ttyd --namespace {{ env.k8s.namespace }} -- \
                    /bin/bash -c "/fetch-namespaces.sh 2>&1 | grep -ozP '(?s)app-namespaces:\K.*'" \
                ) \
                && for app_namespace in $app_namespaces; do
                  echo "starting app namespace '$app_namespace' ..."
                  kubectl scale --replicas=1 --namespace $app_namespace Deployment,StatefulSet,DaemonSet --all || true
                done
        stop:
            - |
                echo "stopping argocd apps ..." \
                && app_namespaces=$(kubectl exec deployment/ttyd --namespace {{ env.k8s.namespace }} -- \
                    /bin/bash -c "/fetch-namespaces.sh 2>&1 | grep -ozP '(?s)app-namespaces:\K.*'" \
                ) \
                && for app_namespace in $app_namespaces; do
                  echo "stopping app namespace '$app_namespace' ..."
                  kubectl scale --replicas=0 --namespace $app_namespace Deployment,StatefulSet,DaemonSet --all || true
                done
            - |
                echo "stopping argocd instance ..." \
                && kubectl scale --replicas=0 --namespace {{ env.k8s.namespace }} Deployment,StatefulSet,DaemonSet --all
        environment:
            ARGOCD_ADMIN_PASS: '{{ env.varGroups.argocd.ARGOCD_ADMIN_PASS }}'
            ARGOCD_READONLY_PASS: '{{ env.varGroups.argocd.ARGOCD_READONLY_PASS }}'
        dependsOn:
            - argocd-ttyd-image
            - argocd
